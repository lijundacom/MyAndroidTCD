apply plugin: 'com.android.model.application'

model {
    android {
        compileSdkVersion = 16
        buildToolsVersion = '19.1'

        defaultConfig {
            applicationId = 'com.example.ljd.myandroidtcd'
            minSdkVersion.apiLevel = 16
            targetSdkVersion.apiLevel = 16
        }
        /*
         * native build settings: taking default for almost everything
         */
        ndk {
            // moduleName:.c/.c++文件的名字
            moduleName = 'USImageJNI'
            toolchain = 'clang'
            stl='gnustl_static' //这样，NDK可以使用c++的某些库，比如<iostream>
            CFlags.addAll(['-Wall'])
            cppFlags.addAll(['-std=c++11', '-Wall'])
            ldLibs.addAll(['log'])
        }
        buildTypes {
            release {
                minifyEnabled = false
                proguardFiles.add(file('proguard-rules.txt'))
            }
        }
        productFlavors {
            // for detailed abiFilter descriptions, refer to "Supported ABIs" @
            // https://developer.android.com/ndk/guides/abis.html#sa
            create("arm") {
                ndk.abiFilters.add("armeabi")
            }
            create("arm7") {
                ndk.abiFilters.add("armeabi-v7a")
            }
            create("arm8") {
                ndk.abiFilters.add("arm64-v8a")
            }
            create("x86") {
                ndk.abiFilters.add("x86")
            }
            create("x86-64") {
                ndk.abiFilters.add("x86_64")
            }
            create("mips") {
                ndk.abiFilters.add("mips")
            }
            create("mips-64") {
                ndk.abiFilters.add("mips64")
            }
            // To include all cpu architectures, leaves abiFilters empty
            create("all")
        }

    }
}
